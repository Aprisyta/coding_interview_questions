// https://leetcode.com/problems/meeting-rooms-ii/

// TimeComplexity = O(n*k)

import java.util.*;
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        List<List<Integer>> rooms = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        rooms.add(Arrays.asList(intervals[0][0], intervals[0][1]));
        
        for (int i = 1; i < intervals.length; i++) {
            int j = 0;
            boolean flag = false;
            for (List<Integer> room : rooms) {
                if (intervals[i][0] >= room.get(1)) {
                    rooms.set(j, Arrays.asList(intervals[i][0], intervals[i][1]));
                    flag = true;
                    break;
                }
                j++;
            }
            if (!flag) {
                rooms.add(Arrays.asList(intervals[i][0], intervals[i][1]));
            }
        }
        
        return rooms.size();
    }
}
